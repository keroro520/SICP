
; 二叉树表示集合
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
	(list entry left right))

(define (element-of-set? x set)
	(cond ((null? set) #f)
		  ((= (entry set) x) #t)
		  ((< x (entry set)) (element-of-set? x (left-branch set)))
		  ((> x (entry set)) (element-of-set? x (right-branch set)))))

(define (join-set x set)
	(cond ((null? set) (make-tree x '() '()))
		  ((= x (entry set)) set)
		  ((< x (entry set)) 
		  	(make-tree (entry set) 
					   (join-set x (left-branch set)) 
					   (right-branch set)))
		  ((> x (entry set))
		  	(make-tree (entry set) 
					   (left-branch set)
					   (join-set x (right-branch set))))))

(define (list->set l)
	(if (null? l)
		'()
		(join-set (car l) (list->set (cdr l)))))
(define (display-point set)
	(display " ") (display (entry set)) (display " ") )
(define (display-set set)
	(cond ((and (null? (left-branch set)) (null? (right-branch set)))
			(display-point set))
		  ((null? (right-branch set))
		  	 (display-set (left-branch set)) 
			 (display " <- ") 
			 (display-point set))
		  ((null? (left-branch set))
		  	 (display-point set)
			 (display " -> ")
			 (display-set (right-branch set)))
		  (else  (display-set (left-branch set))
		  		 (display " <- ")
		  		 (display-point set)
				 (display " -> ")
				 (display-set (right-branch set)))))

;(define (union-set set1 set2)
;(define (intersection-set set1 set2)
(define s1 (list->set (list 1 7  329 3 )))
(define s2 (list->set (list 2 3 5 10 500 7 91 91 91 8 78  89 67  2 13 24 23)))

(define (tree->list-1 tree)
		(if (null? tree)
		'()
		(append (tree->list-1 (left-branch tree))
				(cons (entry tree)
					  (tree->list-1 (right-branch tree))))))
(define (tree->list-2 tree)
		(define (copy-to-list tree result-list)
			(if (null? tree)
			result-list
			(copy-to-list (left-branch tree)
						  (cons (entry tree)
								(copy-to-list (right-branch tree)
									   		  result-list)))))
		(copy-to-list tree '()))

(tree->list-1 s2)
(tree->list-2 s2)
